
W:/lab10/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00004f 	b	144 <_start>
   4:	ea000019 	b	70 <SERVICE_UND>
   8:	ea000019 	b	74 <SERVICE_SVC>
   c:	ea00001a 	b	7c <SERVICE_ABT_INST>
  10:	ea000018 	b	78 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000008 	b	40 <__cs3_region_init_ram>
  1c:	ea000017 	b	80 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <SERVICE_IRQ>:
  40:	e92d403f 	push	{r0, r1, r2, r3, r4, r5, lr}
  44:	e59f40bc 	ldr	r4, [pc, #188]	; 108 <ICDISER+0x8>
  48:	e594500c 	ldr	r5, [r4, #12]

0000004c <PRIV_TIMER_CHECK>:
  4c:	e355001d 	cmp	r5, #29
  50:	1a000001 	bne	5c <KEYS_CHECK>
  54:	eb000058 	bl	1bc <PRIV_TIMER_ISR>
  58:	ea000001 	b	64 <EXIT_IRQ>

0000005c <KEYS_CHECK>:
  5c:	e3550049 	cmp	r5, #73	; 0x49
  60:	eb00002d 	bl	11c <KEY_ISR>

00000064 <EXIT_IRQ>:
  64:	e5845010 	str	r5, [r4, #16]
  68:	e8bd403f 	pop	{r0, r1, r2, r3, r4, r5, lr}
  6c:	e25ef004 	subs	pc, lr, #4

00000070 <SERVICE_UND>:
  70:	eafffffe 	b	70 <SERVICE_UND>

00000074 <SERVICE_SVC>:
  74:	eafffffe 	b	74 <SERVICE_SVC>

00000078 <SERVICE_ABT_DATA>:
  78:	eafffffe 	b	78 <SERVICE_ABT_DATA>

0000007c <SERVICE_ABT_INST>:
  7c:	eafffffe 	b	7c <SERVICE_ABT_INST>

00000080 <SERVICE_FIQ>:
  80:	eafffffe 	b	80 <SERVICE_FIQ>

00000084 <CONFIG_GIC>:
  84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  88:	e3a0001d 	mov	r0, #29
  8c:	e3a01001 	mov	r1, #1
  90:	eb00000a 	bl	c0 <CONFIG_INTERRUPT>
  94:	e3a00049 	mov	r0, #73	; 0x49
  98:	e3a01001 	mov	r1, #1
  9c:	eb000007 	bl	c0 <CONFIG_INTERRUPT>
  a0:	e59f0060 	ldr	r0, [pc, #96]	; 108 <ICDISER+0x8>
  a4:	e59f1060 	ldr	r1, [pc, #96]	; 10c <ICDISER+0xc>
  a8:	e5801004 	str	r1, [r0, #4]
  ac:	e3a01001 	mov	r1, #1
  b0:	e5801000 	str	r1, [r0]
  b4:	e59f0054 	ldr	r0, [pc, #84]	; 110 <ICDISER+0x10>
  b8:	e5801000 	str	r1, [r0]
  bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000000c0 <CONFIG_INTERRUPT>:
  c0:	e92d4030 	push	{r4, r5, lr}
  c4:	e1a041a0 	lsr	r4, r0, #3
  c8:	e3c44003 	bic	r4, r4, #3
  cc:	e59f2040 	ldr	r2, [pc, #64]	; 114 <ICDISER+0x14>
  d0:	e0824004 	add	r4, r2, r4
  d4:	e200201f 	and	r2, r0, #31
  d8:	e3a05001 	mov	r5, #1
  dc:	e1a02215 	lsl	r2, r5, r2
  e0:	e5943000 	ldr	r3, [r4]
  e4:	e1833002 	orr	r3, r3, r2
  e8:	e5843000 	str	r3, [r4]
  ec:	e3c04003 	bic	r4, r0, #3
  f0:	e59f2020 	ldr	r2, [pc, #32]	; 118 <ICDISER+0x18>
  f4:	e0824004 	add	r4, r2, r4
  f8:	e2002003 	and	r2, r0, #3
  fc:	e0824004 	add	r4, r2, r4
 100:	e5c41000 	strb	r1, [r4]
 104:	e8bd8030 	pop	{r4, r5, pc}
 108:	fffec100 	.word	0xfffec100
 10c:	0000ffff 	.word	0x0000ffff
 110:	fffed000 	.word	0xfffed000
 114:	fffed100 	.word	0xfffed100
 118:	fffed800 	.word	0xfffed800

0000011c <KEY_ISR>:
 *                                                                          
 * This routine checks which KEY has been pressed.  If KEY3 it stops/starts the timer.
****************************************************************************************/
.global	KEY_ISR
KEY_ISR: 		
LDR		R0, =KEY_BASE			// base address of KEYs parallel port
 11c:	e59f0018 	ldr	r0, [pc, #24]	; 13c <END_KEY_ISR+0x4>
LDR		R1, [R0, #0xC]			// read edge capture register
 120:	e590100c 	ldr	r1, [r0, #12]
STR		R1, [R0, #0xC]			// clear the interrupt
 124:	e580100c 	str	r1, [r0, #12]

00000128 <START_STOP>:

//CHK_KEY3:		
//...

START_STOP:	
LDR		R0, =MPCORE_PRIV_TIMER		// timer base address
 128:	e59f0010 	ldr	r0, [pc, #16]	; 140 <END_KEY_ISR+0x8>
LDR		R1, [R0, #0x8]			// read timer control register
 12c:	e5901008 	ldr	r1, [r0, #8]
EOR		R1, R1, #0b1			// invert the enable bit
 130:	e2211001 	eor	r1, r1, #1
STR		R1, [R0, #0x8]			//store it back into the timer
 134:	e5801008 	str	r1, [r0, #8]

00000138 <END_KEY_ISR>:

//...

END_KEY_ISR:
MOV	PC, LR
 138:	e1a0f00e 	mov	pc, lr
 13c:	ff200050 	.word	0xff200050
 140:	fffec600 	.word	0xfffec600

00000144 <_start>:
*/
.text
.global	_start
_start:
//... initialize the IRQ stack pointer ...
MOV     R0, #0b10010            //switch to IRQ mode by assigning 10010 to the last 5 bits of CPSR)
 144:	e3a00012 	mov	r0, #18
MSR     CPSR, R0
 148:	e129f000 	msr	CPSR_fc, r0
LDR     SP, =0xFFFFFFFC          // Define IRQ Stack Pointer Location
 14c:	e3e0d003 	mvn	sp, #3


//... initialize the SVC stack pointer ...
MOV     R0, #0b10011            //switch to SVC Mode
 150:	e3a00013 	mov	r0, #19
MSR     CPSR, R0
 154:	e129f000 	msr	CPSR_fc, r0
LDR     SP, =0x3FFFFFFC          //define SVC Stack Pointer Location
 158:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003


BL	CONFIG_GIC				// configure the ARM generic interrupt controller
 15c:	ebffffc8 	bl	84 <CONFIG_GIC>
BL	CONFIG_PRIV_TIMER		// configure the MPCore private timer
 160:	eb000005 	bl	17c <CONFIG_PRIV_TIMER>
BL	CONFIG_KEYS				// configure the pushbutton KEYs
 164:	eb00000a 	bl	194 <CONFIG_KEYS>
		
//... enable ARM processor interrupts ...
MSR     CPSR, #0b00010011       // bits 6 and 7 enable processor interrupts
 168:	e329f013 	msr	CPSR_fc, #19
                                            // bit 5 indicates ARM execution

LDR		R6, =0xFF200000 		// red LED base address
 16c:	e59f6038 	ldr	r6, [pc, #56]	; 1ac <LEDR_PATTERN+0x4>

00000170 <MAIN>:

MAIN:
LDR		R4, LEDR_PATTERN		// LEDR pattern; modified by timer ISR
 170:	e59f4030 	ldr	r4, [pc, #48]	; 1a8 <LEDR_PATTERN>
STR 	R4, [R6] 				// write to red LEDs
 174:	e5864000 	str	r4, [r6]
B 		MAIN
 178:	eafffffc 	b	170 <MAIN>

0000017c <CONFIG_PRIV_TIMER>:

/* Configure the MPCore private timer to create interrupts every 1/10 second */
CONFIG_PRIV_TIMER:
LDR		R0, =0xFFFEC600 		// Timer base address
 17c:	e59f002c 	ldr	r0, [pc, #44]	; 1b0 <LEDR_PATTERN+0x8>
// ... code not shown
LDR     R1, =50000000            // frequency. Clock is 200 MHz -> 0.25 s = 50000000
 180:	e59f102c 	ldr	r1, [pc, #44]	; 1b4 <LEDR_PATTERN+0xc>
STR     R1, [R0]                // store frequency in load part of timer
 184:	e5801000 	str	r1, [r0]
LDR     R2, =0b111
 188:	e3a02007 	mov	r2, #7
STR     R2, [R0, #8]            // Interrupt, Enable (Start Timer), Auto-Reload
 18c:	e5802008 	str	r2, [r0, #8]
MOV 	PC, LR 					// return
 190:	e1a0f00e 	mov	pc, lr

00000194 <CONFIG_KEYS>:


/* Configure the KEYS to generate an interrupt */
CONFIG_KEYS:
LDR		R0, =0xFF200050 		// KEYs base address
 194:	e59f001c 	ldr	r0, [pc, #28]	; 1b8 <LEDR_PATTERN+0x10>
LDR     R3, =0b1000             //store key3=1 (since this is the only key we want to trigger an interrupt)
 198:	e3a03008 	mov	r3, #8
STR     R3, [R0, #8]            // store 1 into the interrupt mask register, which allows an interrupt to be triggered anytime KEY3 changes
 19c:	e5803008 	str	r3, [r0, #8]
MOV	PC, LR 					// return
 1a0:	e1a0f00e 	mov	pc, lr

000001a4 <LEDR_DIRECTION>:
 1a4:	00000000 	.word	0x00000000

000001a8 <LEDR_PATTERN>:
 1a8:	00000201 	.word	0x00000201
 1ac:	ff200000 	.word	0xff200000
 1b0:	fffec600 	.word	0xfffec600
 1b4:	02faf080 	.word	0x02faf080
 1b8:	ff200050 	.word	0xff200050

000001bc <PRIV_TIMER_ISR>:
 * Shifts the pattern being displayed on the LEDR
 * 
******************************************************************************/
.global PRIV_TIMER_ISR
PRIV_TIMER_ISR:	
LDR		R0, =MPCORE_PRIV_TIMER	// base address of timer
 1bc:	e59f0094 	ldr	r0, [pc, #148]	; 258 <END_TIMER_ISR+0x4>
MOV		R1, #1
 1c0:	e3a01001 	mov	r1, #1
STR		R1, [R0, #0xC]				// write 1 to F bit to reset it
 1c4:	e580100c 	str	r1, [r0, #12]

000001c8 <SWEEP>:
															// and clear the interrupt

/* Move the two LEDS to the centre or away from the centre to the outside. */
SWEEP:		
LDR		R0, =LEDR_DIRECTION	// put shifting direction into R2
 1c8:	e59f008c 	ldr	r0, [pc, #140]	; 25c <END_TIMER_ISR+0x8>
LDR		R2, [R0]
 1cc:	e5902000 	ldr	r2, [r0]
LDR		R1, =LEDR_PATTERN		// put LEDR pattern into R3
 1d0:	e59f1088 	ldr	r1, [pc, #136]	; 260 <END_TIMER_ISR+0xc>
LDR		R3, [R1]
 1d4:	e5913000 	ldr	r3, [r1]

//				...
CMP R2, #0 //check if shifting to centre
 1d8:	e3520000 	cmp	r2, #0
BEQ TOCENTRE
 1dc:	0a000000 	beq	1e4 <TOCENTRE>
B TOOUTSIDE
 1e0:	ea00000c 	b	218 <TOOUTSIDE>

000001e4 <TOCENTRE>:

                
TOCENTRE:		
//...
//...
LDR R7, =0b1111100000
 1e4:	e3a07e3e 	mov	r7, #992	; 0x3e0
LDR R8, =0b0000011111
 1e8:	e3a0801f 	mov	r8, #31
lDR R9, =0b0000110000
 1ec:	e3a09030 	mov	r9, #48	; 0x30
AND R10, R7, R3 //extract left 5 bits
 1f0:	e007a003 	and	r10, r7, r3
AND R11, R8, R3 //extract right 5 bits
 1f4:	e008b003 	and	r11, r8, r3
LSR R10, R10, #1 //shift left bits to right
 1f8:	e1a0a0aa 	lsr	r10, r10, #1
LSL R11, R11, #1 //shift right bits to left
 1fc:	e1a0b08b 	lsl	r11, r11, #1
ORR R3, R10, R11 //combine shifted values and store back into R1
 200:	e18a300b 	orr	r3, r10, r11

CMP R3, R9 //check if reached centre
 204:	e1530009 	cmp	r3, r9
BEQ C_O
 208:	0a000000 	beq	210 <C_O>
B DONE_SWEEP
 20c:	ea00000e 	b	24c <DONE_SWEEP>

00000210 <C_O>:


C_O:
MOV		R2, #1					// change direction to outside
 210:	e3a02001 	mov	r2, #1
B DONE_SWEEP
 214:	ea00000c 	b	24c <DONE_SWEEP>

00000218 <TOOUTSIDE>:

TOOUTSIDE:		
//...
//...
LDR R7, =0b1111100000
 218:	e3a07e3e 	mov	r7, #992	; 0x3e0
LDR R8, =0b0000011111
 21c:	e3a0801f 	mov	r8, #31
LDR R9, =0b1000000001
 220:	e59f903c 	ldr	r9, [pc, #60]	; 264 <END_TIMER_ISR+0x10>
AND R10, R7, R3 //extract left 5 bits
 224:	e007a003 	and	r10, r7, r3
AND R11, R8, R3 //extract right 5 bits
 228:	e008b003 	and	r11, r8, r3
LSL R10, R10, #1 //shift left bits to right
 22c:	e1a0a08a 	lsl	r10, r10, #1
LSR R11, R11, #1 //shift right bits to left
 230:	e1a0b0ab 	lsr	r11, r11, #1
ORR R3, R10, R11 //combine shifted values and store back into R1
 234:	e18a300b 	orr	r3, r10, r11

CMP R3,R9 //check if reached outside
 238:	e1530009 	cmp	r3, r9
BEQ O_C
 23c:	0a000000 	beq	244 <O_C>
B DONE_SWEEP
 240:	ea000001 	b	24c <DONE_SWEEP>

00000244 <O_C>:

O_C:
MOV		R2, #0					// change direction to centre
 244:	e3a02000 	mov	r2, #0
B			DONE_SWEEP
 248:	eaffffff 	b	24c <DONE_SWEEP>

0000024c <DONE_SWEEP>:

DONE_SWEEP:
STR		R2, [R0]					// put shifting direction back into memory
 24c:	e5802000 	str	r2, [r0]
STR		R3, [R1]					// put LEDR pattern back onto stack
 250:	e5813000 	str	r3, [r1]

00000254 <END_TIMER_ISR>:

END_TIMER_ISR:
MOV		PC, LR
 254:	e1a0f00e 	mov	pc, lr
 258:	fffec600 	.word	0xfffec600
 25c:	000001a4 	.word	0x000001a4
 260:	000001a8 	.word	0x000001a8
 264:	00000201 	.word	0x00000201
